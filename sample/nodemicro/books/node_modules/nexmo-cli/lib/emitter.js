"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Emitter =
/*#__PURE__*/
function () {
  function Emitter() {
    _classCallCheck(this, Emitter);

    this.silenced = false;
    this.amplified = false;
    this.debugging = false;
  }

  _createClass(Emitter, [{
    key: "quiet",
    value: function quiet() {
      var silenced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.silenced = silenced;
    }
  }, {
    key: "verbose",
    value: function verbose() {
      var amplified = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.amplified = amplified;
    }
  }, {
    key: "debug",
    value: function debug() {
      var debugging = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.debugging = debugging;
    }
  }, {
    key: "log",
    value: function log(message, amplified_message) {
      if (this.amplified && amplified_message) message = amplified_message;
      if (!this.silenced && message) console.log(message); // eslint-disable-line no-console
    }
  }, {
    key: "warn",
    value: function warn(message) {
      if (!this.silenced) console.warn(message); // eslint-disable-line no-console
    }
  }, {
    key: "error",
    value: function error(message) {
      console.error(message); // eslint-disable-line no-console

      process.exit(1);
    }
  }, {
    key: "debugger",
    value: function _debugger(message) {
      if (this.debugging) {
        console.log(message);
      } // eslint-disable-line no-console

    }
  }, {
    key: "table",
    value: function table(data, regular_keys, verbose_keys) {
      var _this = this;

      var keys = this.amplified ? verbose_keys : regular_keys;
      var records = mapRecords(data, keys);

      if (this.amplified) {
        records.unshift(keys);
      }

      var lengths = valueLengths(records);
      records.forEach(function (record, row) {
        var message = formatMessage(record, lengths);

        _this.log(message);

        if (row == 0 && _this.amplified) _this.log(right('', message.length, '-'));
      });
    }
  }, {
    key: "list",
    value: function list(message, verbose_data) {
      if (this.amplified || !message) {
        var _message = formatList(verbose_data);

        this.log(_message);
      } else {
        this.log(message);
      }
    }
  }, {
    key: "pagination",
    value: function pagination(flags, data) {
      var page = parseInt(flags.page || 1);
      var size = parseInt(flags.size || 100);
      var total = data.count;
      var start = size * (page - 1) + 1;
      var end = Math.min(start + size - 1, total);
      if (this.amplified) this.log("Item ".concat(start, "-").concat(end, " of ").concat(total, "\n"));
    }
  }]);

  return Emitter;
}();

var _default = Emitter;
exports.default = _default;

var right = function right() {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';

  if (string.length >= size) {
    return string;
  }

  var max = size - string.length;

  for (var i = 0; i < max; i++) {
    string += padding;
  }

  return string;
};

var mapRecords = function mapRecords(records, keys) {
  return records.map(function (record) {
    var mappedRecord = keys.map(function (key) {
      return "".concat(record[key]);
    });
    return mappedRecord;
  });
};

var valueLengths = function valueLengths(records) {
  var lengths = [];
  records.forEach(function (record) {
    record.forEach(function (value, index) {
      lengths[index] = Math.max(lengths[index] || 0, value.length);
    });
  });
  return lengths;
};

var formatMessage = function formatMessage(record, lengths) {
  return record.reduce(function (previous, current, index) {
    if (index == 1) {
      previous = right(previous, lengths[index - 1]);
    }

    return "".concat(previous, " | ").concat(right(current, lengths[index]));
  });
};

var formatList = function formatList() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var entries = Object.keys(data).map(function (key) {
    return [key, data[key]];
  });
  return entries.reduce(function (message, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (_typeof(value) === 'object') {
      return message + formatList(value, prefix + key + '.');
    }

    return message + "[".concat(prefix).concat(key, "]\n") + "".concat(data[key], "\n\n");
  }, '');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,